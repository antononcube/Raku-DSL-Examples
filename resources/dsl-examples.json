{
	"WL":{
		"ClCon":{
			"use the data dfSOXE":"ClConUnit[dfSOXE]",
			"split the data with ration 0.64":"ClConSplitData[0.64]",
			"split data intor training and testing parts using training data ratio 0.72":"ClConSplitData[0.72]",
			"Summarize the data":"ClConEchoDataSummary",
			"show data breakdown":"ClConEchoDataSummary",
			"echo data summary":"ClConEchoDataSummary",
			"Train a classifier using logistic regression algorithm":"ClConMakeClassifier[\"LogisticRegression\"]",
			"classifier creation with using random forest":"ClConMakeClassifier[\"RandomForest\"]",
			"make a nearest neighbors classifier":"ClConMakeClassfier[\"NearestNeighbors\"]",
			"show measurements":"Function[{v,c},ClConUnit[v,c]⟹ClConClassifierMeasurements[{\"Accuracy\",\"Precision\",\"Recall\"}]⟹ClConEchoValue]",
			"classifier information":"ClConEchoFunctionContext[Information[#classifier]&]",
			"plot the ROC functions PPV and FPR":"ClConROCPlot[\"PPV\",\"FPR\"]",
			"show ROC plots":"ClConROCPLot",
			"give ROC plots with image size 900":"ClConROCPLot[ImageSize->900]",
			"I wanna see the confusion matrix plot here":"Function[{v,c},ClConUnit[v,c]⟹ClConClassifierMeasurements[{\"ConfusionMatrixPlot\"}]⟹ClConEchoValue]",
			"echo pipeline value":"ClConEchoValue",
			"show the pipeline context":"ClConEchoContext",
			"reduce the dimension to 14 topics":"ClConReduceDimension[14]"
		},
		"QRMon":{
			"use tsTemp":"QRMonUnit[tsTemp]",
			"with the data tsTemp":"QRMonUnit[tsTemp]",
			"do regression with 12 knots":"QRMonQuantileRegression[12]",
			"quantile regression with 30 knots and interpolation order 3":"QRMonQuantileRegression[12,InterpolationOrder->3]",
			"compute the regression quantiles for probabilities 0.1, 0.5, and 0.9":"QRMonQuantileRegression[12, {0.1, 0.5, 0.9}]",
			"compute linear regression":"QRMonLeastSquaresFit[6]",
			"compute linear regression with 14 basis functions":"QRMonLeastSquaresFit[14]",
			"use the color red for regression quantiles":"QRMonSetRegressionFunctionsPlotOptions[{PlotStyle->Red}]",
			"use Orange for to plot the data":"QRMonSetDataPlotOptions[{PlotStyle->Orange}]",
			"show date list plot":"QRMonDateListPlot[]",
			"plot the data and fits":"QRMonPlot[]",
			"plot with aspect ratio 1\/3":"QRMonPlot[AspectRatio->1\/3]",
			"plot with image size 800 and plot theme scientific":"QRMonPlot[ImageSize -> 800, PlotTheme->\"Scientific\"]",
			"show date list error plots":"QRMonErrorPlots[\"DateListPlot\"->True]",
			"show relative error plots":"QRMonErrorPlots[\"RelativeErrors\"->True]",
			"Give the error plots using absolute errors":"QRMonErrorPlots[\"RelativeErrors\"->False]",
			"echo data summary":"QRMonEchoDataSummary[]",
			"rescale the data":"QRMonRescale[Axes->{False,True}]",
			"rescale the data in both dimensions":"QRMonRescale[Axes->{True,True}]",
			"find outliers":"QRMonOutliers[]",
			"plot outliers":"QRMonOutliersPlot[]",
			"give a date plot for the outliers":"QRMonOutliersPlot[\"DateListPlot\"->True]",
			"outliers with time axis":"QRMonOutliersPlot[\"DateListPlot\"->True]",
			"take the value":"QRMonTakeValue",
			"show the value":"QRMonEchoValue"
		},
		"LSAMon":{
			"use the documents aDocs":"LSAMonUnit[aDocs]",
			"use dfTemp":"LSAMonUnit[dfTemp]",
			"make the document-term matrix":"LSAMonMakeDocumentTermMatrix[]",
			"make the document-term matrix with automatic stop words":"LSAMonMakeDocumentTermMatrix[\"StemmingRules\"->Automatic,\"StopWords\"->Automatic]",
			"make the document-term matrix without stemming":"LSAMonMakeDocumentTermMatrix[\"StemmingRules\"->{},\"StopWords\"->Automatic]",
			"echo document term matrix statistics":"LSAMonEchoDocumentTermMatrixStatistics[]",
			"echo document term matrix metrics with log base 10":"LSAMonEchoDocumentTermMatrixStatistics[\"LogBase\"->10]",
			"apply term weight functions":"LSAMonApplyTermWeightFunctions[]",
			"apply term weight functions: global IDF, local None, normalizer Cosine":"LSAMonApplyTermWeightFunctions[\"GlobalWeightFunction\"->\"IDF\",\"LocalWeightFunction\"->\"None\",\"NormalizerFunction\"->\"Cosine\"]",
			"extract 30 topics using the method SVD":"LSAMonExtractTopics[\"NumberOfTopics\"->30,Method->\"SVD\"]",
			"extract 24 topics using the method NNMF, max steps 12 and min number of documents per term 10":"LSAMonExtractTopics[\"NumberOfTopics\"->24,Method->\"SVD\",\"MaxSteps\"->12,\"MinNumberOfDocumentsPerTerm\"->10]",
			"Echo topics table":"LSAMonEchoTopicsTable[]",
			"Echo topics table with 10 terms per topic":"LSAMonEchoTopicsTable[\"NumberOfTerms\"->10]",
			"show the topics":"LSAMonEchoTopicsTable[]",
			"find the statistical thesaurus for notebook, equation, and function":"LSAMonEchoStatisticalThesaurus[\"Words\"->{\"notebook\",\"equation\",\"funciton\"}]"
		}
	},
	"Python":{
		"QRMon":{
			"use tsTemp":"Regressionizer(temp_data)",
			"with the data tsTemp":"Regressionizer(temp_data)",
			"do regression with 12 knots":"quantile_regression(knots=12)",
			"quantile regression with 30 knots and interpolation order 3":"quantile_regression(knots=12,order=3)",
			"compute the regression quantiles for probabilities 0.1, 0.5, and 0.9":"quantile_regression(knots=12, probs=[0.1, 0.5, 0.9])",
			"compute linear regression":"least_squares_fit(funcs=6)",
			"compute linear regression with 14 basis functions":"least_squares_fit(funcs=14)",
			"do a least squares fit with the basis functions MyFuncs":"least_squares_fit(funcs=MyFuncs)",
			"show date list plot":"date_list_plot()",
			"plot the data and fits":"plot()",
			"plot with width 800 and aspect ratio 1\/3":"plot(width=800, height=800*1\/3)",
			"plot with image size 1000 and plot theme plotly_dark":"plot(width=1000, template=\"plotly_dark\")",
			"show error plots":"error_plots()",
			"show date list error plots":"error_plots(date_list_plot=True)",
			"show relative error plots":"error_plots(relative_errors=True)",
			"echo data summary":"echo_data_summary()",
			"rescale the data":"rescale(regressor=False, value=True)",
			"rescale the data in both dimensions":"rescale(regressor=True, value=True)",
			"find outliers":"outliers()",
			"plot outliers":"outliers_plot()",
			"take the value":"take_value()",
			"show the value":"take_value()"
		},
		"LSAMon":{
			"use the documents aDocs":"LatentSemanticAnalyzer(aDocs)",
			"use dfTemp":"LatentSemanticAnalyzer(dfTemp)",
			"make the document-term matrix":"make_document_term_matrix()",
			"make the document-term matrix with automatic stop words":"make_document_term_matrix[stemming_rules=None,stopWords=True)",
			"make the document-term matrix without stemming":"make_document_term_matrix[stemming_rules=False,stopWords=True)",
			"apply term weight functions":"apply_term_weight_functions()",
			"apply term weight functions: global IDF, local None, normalizer Cosine":"apply_term_weight_functions(global_weight_func='IDF', local_weight_func='None',normalizer_func='Cosine')",
			"extract 30 topics using the method SVD":"extract_topics(number_of_topics=24, method='SVD')",
			"extract 24 topics using the method NNMF, max steps 12 and min number of documents per term 10":"extract_topics(number_of_topics=24, min_number_of_documents_per_term=10, method='NNMF')",
			"Echo topics table":"echo_topics_interpretation(wide_form=True)",
			"show the topics":"echo_topics_interpretation(wide_form=True)",
			"Echo topics table with 10 terms per topic":"echo_topics_interpretation(number_of_terms=10, wide_form=True)",
			"find the statistical thesaurus for the words notebook, equation, and function":"echo_statistical_thesaurus(terms=stemmerObj.stemWords(['notebook','equation','function']), wide_form=True)",
			"show statistical thesaurus for king, castle, poison, Denmark, each entry with 12 words":"echo_statistical_thesaurus(terms=stemmerObj.stemWords(['king','castle','poison','Denmark']), wide_form=True, number_of_nearest_neighbors=12)"
		}
	}
}